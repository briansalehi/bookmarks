create temp table temp_blocks(row_number serial, t_content text, t_type flashback.block_type, t_language varchar(10));
create procedure add_block(type flashback.block_type, language varchar(10), content text) language plpgsql as $$ begin insert into temp_blocks (t_type, t_language, t_content) values (type, language, content); end; $$;

--call flashback.add_block('text', 'txt'  , '');
--call flashback.add_block('code', 'cmake', '');
--call flashback.add_block('code', 'sh'   , '');
--call flashback.add_block('text', 'txt'  , '');
--call flashback.create_note_with_name('Modern CMake for C++', 2, '');
--
--set_section_as_complete('Modern CMake for C++', 2);

call flashback.add_block('text', 'txt'  , 'The best approach is to make the targets available through `find_package()`, but it requires creating a package and installing it on the system.');
call flashback.add_block('code', 'cmake', 'find_package(<project-name> <version> COMPONENTS <components>...)');
call flashback.create_note_with_name('Modern CMake for C++', 14, 'What is the most appropriate way of making the targets of a project available to other projects system-wide?');


call flashback.add_block('text', 'txt'  , 'To properly define all targets of a package defined using commands such as `add_library()` and `add_executable()` with the correct properties set, we should explicitly export them so that the consuming project includes them using `include()` command.');
call flashback.add_block('code', 'cmake', '# library
export(TARGETS <target>... [NAMESPACE <namespace>] [APPEND] FILE <path> [EXPORT_LINK_INTERFACE_LIBRARIES])');
call flashback.add_block('code', 'cmake', '# consumer
cmake_minimum_required(VERSION 3.30.0)
project(Consumer)
include(Producer.cmake)');
call flashback.add_block('text', 'txt'  , 'You must specify targets to export after `TARGETS` and the destination filename after `FILE`. The other arguments are optional.');
call flashback.create_note_with_name('Modern CMake for C++', 14, 'Define an export file to be used by consuming projects?');


call flashback.add_block('text', 'txt'  , '1. Using `export(TARGETS...)`, which directly takes the targets to be exported:');
call flashback.add_block('code', 'cmake', 'export(TARGETS sum sub mul div NAMESPACE Math:: FILE "${CMAKE_CURRENT_BINARY_DIR}/cmake/MathTargets.cmake")');
call flashback.add_block('text', 'txt'  , '2. Using `export(EXPORT...)`, which requires the name of predefined export rather than a list of exported targets. Such exported targets are defined by `install(TARGETS)` with `EXPORT` keyboard:');
call flashback.add_block('code', 'cmake', 'install(TARGETS <target> EXPORT <export>)');
call flashback.add_block('code', 'cmake', 'export(EXPORT <export> [NAMESPACE <namespace>] FILE <path>)');
call flashback.add_block('text', 'txt'  , 'For example:');
call flashback.add_block('code', 'cmake', 'install(TARGETS sum sub mul div EXPORT MathTargets")
export(EXPORT MathTargets NAMESPACE Math:: FILE "${CMAKE_CURRENT_BINARY_PATH}/cmake/MathTargets.cmake")');
call flashback.create_note_with_name('Modern CMake for C++', 14, 'What are the alternative approaches to exporting a target?');


call flashback.add_block('text', 'txt'  , 'When exporting targets using `export()` command, the paths will be hardcoded in the generated export file. To make it relocatable, additional steps are required.');
call flashback.add_block('code', 'cmake', 'cmake_minimum_required(VERSION 3.30.0)
project(Math LANGUAGES CXX)

add_library(sum)
target_sources(sum src/sum.cpp)
target_include_directories(sum "${CMAKE_CURRENT_SOURCE_DIR}/include")

install(TARGETS sum EXPORT MathTargets)
export(EXPORT MathTargets NAMESPACE Math:: FILE "${CMAKE_CURRENT_BINARY_PATH}/cmake/MathTargets.cmake")');
call flashback.add_block('code', 'sh'   , 'cmake -S /tmp/math -B /tmp/math/build -D CMAKE_BUILD_TYPE=Release');
call flashback.add_block('code', 'cmake', '# /tmp/math/build/cmake/MathTargets.cmake Generated by CMake

# Create imported target Math::sum
add_library(Math::sum SHARED IMPORTED)

set_target_properties(Math::sum PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "/tmp/math/include"
  INTERFACE_SOURCES "/tmp/math/src/capture.cpp"
)

# Import target "Math::sum" for configuration "Release"
set_property(TARGET Math::sum APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(Math::sum PROPERTIES
  IMPORTED_LOCATION_RELEASE "/tmp/math/build/libsum.so"
  IMPORTED_SONAME_RELEASE "libsum.so"
  )');
call flashback.create_note_with_name('Modern CMake for C++', 14, 'Why the generated export file cannot be used system-wide?');


--call flashback.add_block('text', 'txt'  , '');
--call flashback.add_block('code', 'cmake', '');
--call flashback.add_block('code', 'sh'   , '');
--call flashback.add_block('text', 'txt'  , '');
--call flashback.create_note_with_name('Modern CMake for C++', 14, '');
--
--
--call flashback.add_block('text', 'txt'  , '');
--call flashback.add_block('code', 'cmake', '');
--call flashback.add_block('code', 'sh'   , '');
--call flashback.add_block('text', 'txt'  , '');
--call flashback.create_note_with_name('Modern CMake for C++', 14, '');
--
--
--call flashback.add_block('text', 'txt'  , '');
--call flashback.add_block('code', 'cmake', '');
--call flashback.add_block('code', 'sh'   , '');
--call flashback.add_block('text', 'txt'  , '');
--call flashback.create_note_with_name('Modern CMake for C++', 14, '');
--
--
--call flashback.add_block('text', 'txt'  , '');
--call flashback.add_block('code', 'cmake', '');
--call flashback.add_block('code', 'sh'   , '');
--call flashback.add_block('text', 'txt'  , '');
--call flashback.create_note_with_name('Modern CMake for C++', 14, '');
--
--set_section_as_complete('Modern CMake for C++', 14);

drop procedure add_block;
drop table temp_blocks;
