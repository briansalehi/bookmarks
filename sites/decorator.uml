@startuml
abstract class NotiferInterface <<interface>> {
    + {abstract} send(message: string): void
}

class EventNotifier <<concrete>> {
    + send(message: string): void
}

NotiferInterface <|-- EventNotifier

class Notifier <<decorator>> {
    - base: NotiferInterface&
    + Notifier(instance: NotiferInterface&)
    + send(message: string): void
}

note right of Notifier::send
    base.send()
end note

NotiferInterface <|-- Notifier

class EncryptedNotifier <<concrete decorator>> {
    + EncryptedNotifier(instance: NotiferInterface&)
    + send(message: string): void
}

note right of EncryptedNotifier::send
    Notifier::send()
end note

Notifier <|-- EncryptedNotifier
@enduml
